Prompt,Code
/* shark */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create fire */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* song list */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* nft frame */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* clickable plane */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create cone */,
/* on door hover */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a sign */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* add a door */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function the add sound to the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create water */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* add material to the door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* transform the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* scene from theater glb */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* creating a animator */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* clickable plane */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add movement to the player */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function for sound when door opens and closes */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* shark */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* song list */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* changing color sphere onClick */,
/* song list */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a custom wheels component */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function to open and close the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function to play sound when the door opens */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create avocado */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a sphere */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function for interacting with the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* fixed wall */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* function for sound when door opens and closes */,
/* on door hover */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create table */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* jukebox from gltf */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* changing color sphere onClick */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* clickable plane */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a custom wheels component */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create player */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create cylinder */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create table */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add smoke */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene model from underwater.gltf */,
/* changing color sphere onClick */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* fixed wall */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function for interacting with the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create a texture */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function the add sound to the door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create plane */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add a shape to the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* changing color sphere onClick */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* nft frame */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a cylinder */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a cylinder */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create cylinder */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* spawn a cube */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create player */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create phone */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* transform the door */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create a custom wheels component */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function for interacting with the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* song list */ ,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create text */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function to create a door entity */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a class */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create cone */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a custom wheels component */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function for sound when door opens and closes */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create a custom wheels component */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* creating door parent */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* on door hover */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create water */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create player */,
/* create a sign */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* clickable plane */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* remove box */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create table */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a texture */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create table */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* transform the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* shark */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* jukebox from gltf */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add movement to the player */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create cylinder */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a wheel */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* nft frame */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create avocado */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* function to open and close the door */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create water */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create text */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* fixed wall */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* changing color sphere onClick */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add a shape to the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* function to open and close the door */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* shark */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create fire */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create phone */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create cylinder */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* defining door positions */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function example */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function to play sound when the door opens */,
/* song list */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a sphere */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* ground */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add a shape to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add smoke */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* jukebox from gltf */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* shark */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create player */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create phone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* changing color sphere onClick */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create text */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* door material */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create box */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create box */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* clickable plane */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* changing color sphere onClick */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add a shape to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* scene from theater glb */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* door material */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* nft frame */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* shark */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a cylinder */,
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* scene from theater glb */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* remove box */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* defining door positions */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* clickable plane */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* scene from theater glb */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create fire */ ,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create phone */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create a cylinder */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* nft frame */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create cylinder */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* door material */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* defining door positions */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* scene from theater glb */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function for interacting with the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* shark */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a wheel */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create phone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* clickable plane */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* add a door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* song list */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add smoke */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to play sound when the door opens */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a cylinder */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* add a door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a cylinder */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to create a door entity */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function example */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* ground */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* nft frame */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create box */ ,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* fixed wall */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* transform the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a cylinder */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* on door hover */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* on door hover */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* scene model from underwater.gltf */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* remove box */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* function for interacting with the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function for interacting with the door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* on door hover */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* nft frame */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* remove box */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a wheel */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to open and close the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* song list */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a cylinder */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* clickable plane */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create player */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create cone */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function to create a door entity */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* add movement to the player */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* add smoke */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a sphere */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create phone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* add a door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create table */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* nft frame */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create fire */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create cone */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create plane */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* shark */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* spawn a cube */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function for interacting with the door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* creating door parent */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* on door hover */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* fixed wall */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* scene model from underwater.gltf */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create table */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a sphere */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create a texture */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* add a shape to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a class */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create cylinder */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* creating door parent */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create phone */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* add a door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* jukebox from gltf */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* transform the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* scene from theater glb */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* changing color sphere onClick */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* remove box */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* fixed wall */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to create a door entity */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create text */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a sphere */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* jukebox from gltf */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add smoke */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create box */ ,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function for sound when door opens and closes */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a cylinder */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* add smoke */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function example */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create cone */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add smoke */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* defining door positions */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function for interacting with the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a sign */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function for sound when door opens and closes */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create fire */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* door material */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a sphere */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* ground */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function the add sound to the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* add a shape to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* scene from theater glb */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function for interacting with the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create plane */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* song list */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* shark */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* on door hover */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* nft frame */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* jukebox from gltf */ ,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create a custom wheels component */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* spawn a cube */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add a door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create avocado */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* creating a animator */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create cylinder */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* add a shape to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* defining door positions */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* add a door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* jukebox from gltf */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a wheel */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* nft frame */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a class */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* on door hover */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* transform the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function for sound when door opens and closes */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a texture */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* fixed wall */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function for sound when door opens and closes */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* transform the door */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* door material */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* fixed wall */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* clickable plane */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create cone */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add a door */,
/* create avocado */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create player */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* song list */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* changing color sphere onClick */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create cone */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create table */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function for sound when door opens and closes */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a wheel */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* changing color sphere onClick */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* creating door parent */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create cylinder */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create box */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create table */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create a wheel */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create player */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* defining door positions */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a sign */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create table */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* on door hover */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* function the add sound to the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create text */,
/* nft frame */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a sphere */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add movement to the player */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* transform the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create a custom wheels component */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a sign */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add material to the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* changing color sphere onClick */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* function for interacting with the door */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* on door hover */,
/* create box */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a wheel */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* shark */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* clickable plane */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* fixed wall */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create player */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create plane */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* nft frame */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create fire */ ,
/* ground */,
/* add a door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add a shape to the door */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create text */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create plane */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* creating door parent */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* creating a animator */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* add a shape to the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a texture */ ,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* door material */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* clickable plane */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* scene model from underwater.gltf */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function for sound when door opens and closes */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* function to create a door entity */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create table */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* add a shape to the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a custom wheels component */,
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a cylinder */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* shark */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a wheel */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* scene from theater glb */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create avocado */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* changing color sphere onClick */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create table */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function to create a door entity */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* add smoke */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create text */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* creating door parent */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* scene model from underwater.gltf */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create a cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* ground */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function the add sound to the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create phone */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add movement to the player */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create water */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a custom wheels component */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add a door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* add smoke */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function to play sound when the door opens */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* creating a animator */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* fixed wall */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create cylinder */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* scene from theater glb */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function for sound when door opens and closes */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* spawn a cube */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* remove box */,
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* song list */ ,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add a shape to the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* clickable plane */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create table */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function for sound when door opens and closes */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create box */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* clickable plane */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add smoke */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a texture */ ,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function for interacting with the door */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create phone */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create cone */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* nft frame */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* shark */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* on door hover */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function for interacting with the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create water */,
/* shark */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* defining door positions */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* scene from theater glb */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create a custom wheels component */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* add a door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* add a door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* spawn a cube */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* scene model from underwater.gltf */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* scene model from underwater.gltf */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* scene from theater glb */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* jukebox from gltf */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* creating door parent */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* add material to the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* scene from theater glb */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create a cylinder */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* nft frame */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* defining door positions */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* scene from theater glb */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create text */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function for interacting with the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* door material */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* transform the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create water */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function example */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create fire */ ,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a class */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* changing color sphere onClick */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function to open and close the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* ground */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a wheel */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* jukebox from gltf */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* creating a animator */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create box */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* nft frame */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* jukebox from gltf */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create cone */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* clickable plane */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create box */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* scene from theater glb */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create fire */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create avocado */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* add movement to the player */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create player */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* scene model from underwater.gltf */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* scene model from underwater.gltf */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* creating a animator */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* jukebox from gltf */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create cylinder */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* transform the door */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create cone */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* defining door positions */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* scene from theater glb */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* remove box */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* door material */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* scene from theater glb */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* creating a animator */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create water */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function to open and close the door */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* on door hover */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function to open and close the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a cylinder */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* transform the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* shark */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create water */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* creating door parent */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* changing color sphere onClick */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* ground */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a cylinder */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* changing color sphere onClick */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add smoke */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* on door hover */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* function example */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a texture */ ,
/* create cylinder */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* changing color sphere onClick */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* defining door positions */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function the add sound to the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create box */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function for interacting with the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create box */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* door material */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* spawn a cube */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* scene model from underwater.gltf */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create avocado */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* creating a animator */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a sphere */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create text */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create a texture */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* remove box */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create a sphere */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* add material to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create player */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* spawn a cube */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a texture */ ,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* transform the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* on door hover */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add a door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* clickable plane */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a custom wheels component */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* nft frame */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* scene from theater glb */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* on door hover */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create player */,
/* clickable plane */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* clickable plane */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a custom wheels component */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* add a door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* changing color sphere onClick */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a sign */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* scene model from underwater.gltf */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create cone */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* scene model from underwater.gltf */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create cylinder */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function to open and close the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create table */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* creating door parent */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function for interacting with the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create plane */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a sign */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* creating a animator */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* ground */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create text */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* defining door positions */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function the add sound to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function to play sound when the door opens */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* nft frame */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* spawn a cube */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* add a door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a custom wheels component */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function for interacting with the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create text */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* creating door parent */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add a shape to the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a custom wheels component */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a cylinder */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create cone */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* nft frame */,
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* add a shape to the door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* creating door parent */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for sound when door opens and closes */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* creating a animator */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* fixed wall */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* function to open and close the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* clickable plane */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* add material to the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* creating a animator */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function for sound when door opens and closes */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add a door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create fire */ ,
/* create cylinder */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* clickable plane */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for interacting with the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* scene model from underwater.gltf */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create avocado */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* scene model from underwater.gltf */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a sphere */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create plane */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add a door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function the add sound to the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* remove box */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* song list */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create cone */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* transform the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a texture */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* nft frame */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* nft frame */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* clickable plane */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create plane */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add a door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function to create a door entity */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* spawn a cube */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create player */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* shark */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a custom wheels component */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create plane */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function for sound when door opens and closes */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add a shape to the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* door material */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function for interacting with the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a wheel */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create phone */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* transform the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create phone */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* creating a animator */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create cone */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* shark */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add smoke */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create table */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* defining door positions */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function the add sound to the door */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create phone */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a sign */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* scene from theater glb */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create a cylinder */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* transform the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add a shape to the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* nft frame */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* scene model from underwater.gltf */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create cylinder */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a cylinder */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function to play sound when the door opens */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* shark */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create plane */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a class */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add a shape to the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function to open and close the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* add movement to the player */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* door material */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create phone */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a texture */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a texture */ ,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create box */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function for interacting with the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create water */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function for sound when door opens and closes */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* add material to the door */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function for interacting with the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create cone */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* on door hover */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add a shape to the door */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add a door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* changing color sphere onClick */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create box */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* creating a animator */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* nft frame */,
/* add material to the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a sphere */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* on door hover */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create cylinder */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* transform the door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create fire */ ,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create cone */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* door material */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function to play sound when the door opens */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* on door hover */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create plane */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create text */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create cone */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* remove box */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function the add sound to the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function example */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* changing color sphere onClick */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create plane */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* creating a animator */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create plane */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* creating door parent */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create cone */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a class */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create avocado */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create plane */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* defining door positions */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add a door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function the add sound to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* changing color sphere onClick */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* spawn a cube */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add a shape to the door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a cylinder */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* function to create a door entity */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add smoke */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function the add sound to the door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create avocado */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a sphere */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a cylinder */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* changing color sphere onClick */,
/* on door hover */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function to create a door entity */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a cylinder */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* nft frame */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* ground */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add smoke */ ,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* ground */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* nft frame */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* scene from theater glb */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function to play sound when the door opens */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* add a door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function to play sound when the door opens */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function for sound when door opens and closes */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* add movement to the player */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create fire */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create cylinder */,
/* create water */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create table */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create phone */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* door material */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a sphere */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function to create a door entity */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* creating a animator */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a sphere */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* jukebox from gltf */ ,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* defining door positions */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create player */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* add smoke */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create cone */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function the add sound to the door */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create box */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* spawn a cube */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* fixed wall */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a class */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* add a shape to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function to play sound when the door opens */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a sign */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create fire */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* scene model from underwater.gltf */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* changing color sphere onClick */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* creating a animator */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* fixed wall */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function to play sound when the door opens */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create player */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function to play sound when the door opens */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* add movement to the player */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* nft frame */,
/* shark */,
/* function for sound when door opens and closes */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function for interacting with the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a sphere */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a cylinder */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a sign */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* ground */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create water */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* creating a animator */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create cone */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create fire */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create cone */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* clickable plane */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function to create a door entity */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function for interacting with the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* fixed wall */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* jukebox from gltf */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* jukebox from gltf */ ,
/* function for sound when door opens and closes */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function for interacting with the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add smoke */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add a shape to the door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a texture */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create fire */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* door material */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* creating a animator */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create avocado */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* defining door positions */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* shark */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create box */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function to open and close the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* defining door positions */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function to play sound when the door opens */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create fire */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* song list */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a texture */ ,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create fire */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add material to the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a custom wheels component */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* changing color sphere onClick */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* spawn a cube */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a wheel */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* transform the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* scene from theater glb */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* door material */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create a custom wheels component */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a class */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* clickable plane */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* remove box */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* function for sound when door opens and closes */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* add smoke */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a custom wheels component */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to play sound when the door opens */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function to open and close the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* ground */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* remove box */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add a door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a sphere */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add movement to the player */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* changing color sphere onClick */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function for interacting with the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create plane */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create player */,
/* create fire */ ,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* add a shape to the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function to play sound when the door opens */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function for interacting with the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* scene from theater glb */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* fixed wall */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create avocado */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function to create a door entity */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* add a door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* add movement to the player */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a custom wheels component */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* spawn a cube */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* shark */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a class */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* add a door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* changing color sphere onClick */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create water */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* on door hover */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to open and close the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add a shape to the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* song list */ ,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create cylinder */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function to play sound when the door opens */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* song list */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create plane */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* changing color sphere onClick */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create plane */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function example */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function for interacting with the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create text */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add movement to the player */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* door material */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function example */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* scene from theater glb */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create text */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create a texture */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a texture */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* shark */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* function for interacting with the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a sign */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create box */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add a shape to the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create text */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* scene model from underwater.gltf */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create cone */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* add a door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* shark */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a class */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create avocado */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add a door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create cone */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add movement to the player */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* spawn a cube */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* ground */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* scene from theater glb */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* jukebox from gltf */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* transform the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function the add sound to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* on door hover */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create table */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create a custom wheels component */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create player */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* function for interacting with the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* ground */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create cylinder */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create table */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create box */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create player */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* song list */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* add a shape to the door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* song list */ ,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* shark */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* add material to the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* add smoke */ ,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create box */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function example */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create plane */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function to open and close the door */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a custom wheels component */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* add a door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* nft frame */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* changing color sphere onClick */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create table */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create plane */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function for sound when door opens and closes */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function for sound when door opens and closes */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create fire */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a cylinder */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* scene model from underwater.gltf */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* spawn a cube */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function for interacting with the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a texture */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* defining door positions */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create player */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* shark */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create cone */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create player */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create player */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a cylinder */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function for sound when door opens and closes */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a wheel */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create text */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create box */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* jukebox from gltf */ ,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create plane */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* nft frame */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function for interacting with the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* nft frame */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create box */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function for interacting with the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* shark */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* transform the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a sign */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* creating door parent */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* transform the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create avocado */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create water */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* nft frame */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create a class */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* transform the door */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* nft frame */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create cylinder */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* door material */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* on door hover */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create box */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* scene from theater glb */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create water */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function example */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add movement to the player */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* spawn a cube */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function for interacting with the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* transform the door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a texture */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* clickable plane */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create cylinder */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a cylinder */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* clickable plane */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function to play sound when the door opens */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function the add sound to the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* creating door parent */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* spawn a cube */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* jukebox from gltf */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create box */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* jukebox from gltf */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* add smoke */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* remove box */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create water */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* jukebox from gltf */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* changing color sphere onClick */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create avocado */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* function to create a door entity */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a sphere */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create water */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create text */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create box */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add material to the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* nft frame */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* jukebox from gltf */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function to play sound when the door opens */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create water */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* fixed wall */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* add movement to the player */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function to create a door entity */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* nft frame */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a cylinder */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create phone */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a cylinder */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function the add sound to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* jukebox from gltf */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create box */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add a door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create box */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* shark */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* creating a animator */,
/* nft frame */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create fire */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create box */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* ground */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* remove box */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function for sound when door opens and closes */,
/* create phone */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* shark */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* remove box */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* fixed wall */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* scene model from underwater.gltf */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a sphere */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create fire */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create phone */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* defining door positions */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* jukebox from gltf */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a cylinder */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* add a door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* add a shape to the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* transform the door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create cone */,
/* on door hover */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* changing color sphere onClick */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function for interacting with the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* ground */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* add a shape to the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* on door hover */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function example */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* ground */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a sign */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a wheel */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* add movement to the player */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* add a shape to the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a sign */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* add a shape to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create cone */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add a door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* function to create a door entity */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* add a shape to the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a class */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* jukebox from gltf */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* nft frame */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a sphere */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function to play sound when the door opens */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function the add sound to the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function for sound when door opens and closes */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function for sound when door opens and closes */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* changing color sphere onClick */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add a shape to the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create water */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create avocado */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* creating a animator */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* nft frame */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function example */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create phone */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create fire */ ,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create phone */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* changing color sphere onClick */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create text */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* nft frame */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add movement to the player */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* function the add sound to the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a class */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create a cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create cone */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* on door hover */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* scene model from underwater.gltf */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* nft frame */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* jukebox from gltf */ ,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* add a shape to the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* transform the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* ground */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* jukebox from gltf */ ,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a texture */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a sign */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create cylinder */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* shark */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create water */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create avocado */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* transform the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* spawn a cube */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function to play sound when the door opens */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* spawn a cube */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* creating door parent */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a class */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a shape to the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* scene model from underwater.gltf */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* remove box */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a sign */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add smoke */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* add material to the door */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* on door hover */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* song list */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a sign */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a sign */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* add movement to the player */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* creating door parent */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* remove box */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* jukebox from gltf */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a sign */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create phone */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* jukebox from gltf */ ,
/* add material to the door */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* add smoke */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a texture */ ,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create cone */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a sphere */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create phone */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* add movement to the player */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* add a shape to the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* add movement to the player */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* on door hover */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a custom wheels component */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* changing color sphere onClick */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* add smoke */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* remove box */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a sign */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create phone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* jukebox from gltf */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add material to the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* shark */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create text */,
/* create fire */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add a door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* spawn a cube */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add material to the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function to play sound when the door opens */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create water */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* creating door parent */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create player */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* shark */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* scene model from underwater.gltf */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function for interacting with the door */,
/* create fire */ ,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* door material */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create water */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a texture */ ,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* shark */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function to create a door entity */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a wheel */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a custom wheels component */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* song list */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a cylinder */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a shape to the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create a sign */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* door material */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a sign */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* creating a animator */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function to create a door entity */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* add a shape to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function for sound when door opens and closes */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create a custom wheels component */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* function for sound when door opens and closes */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* transform the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* remove box */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add material to the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create box */ ,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* ground */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create cone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function for interacting with the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* song list */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* song list */ ,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a sign */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* transform the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create avocado */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* defining door positions */,
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a cylinder */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function for sound when door opens and closes */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create phone */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function for sound when door opens and closes */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a sphere */,
/* function to play sound when the door opens */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* ground */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create cone */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* creating a animator */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* song list */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* spawn a cube */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* creating a animator */,
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* nft frame */,
/* fixed wall */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* scene from theater glb */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add movement to the player */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* add a door */,
/* add smoke */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* add a shape to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* scene model from underwater.gltf */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* changing color sphere onClick */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create text */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function example */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* add movement to the player */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* song list */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create cone */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* scene from theater glb */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* defining door positions */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function for sound when door opens and closes */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create fire */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add a door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* nft frame */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to open and close the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* scene from theater glb */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* on door hover */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create player */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create box */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* song list */ ,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a custom wheels component */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* shark */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create cylinder */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a sphere */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* add a door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a custom wheels component */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* clickable plane */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function to play sound when the door opens */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* door material */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a sphere */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a cylinder */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function to play sound when the door opens */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* remove box */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a cylinder */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* remove box */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function the add sound to the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create a class */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* on door hover */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* ground */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function example */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* fixed wall */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* remove box */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function the add sound to the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create table */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create player */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function to play sound when the door opens */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a custom wheels component */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create box */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to play sound when the door opens */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function for sound when door opens and closes */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* creating door parent */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create a texture */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* song list */ ,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create a class */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* scene from theater glb */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function to create a door entity */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* scene from theater glb */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create cone */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function to play sound when the door opens */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* shark */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* clickable plane */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* defining door positions */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* shark */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create phone */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function for sound when door opens and closes */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create cylinder */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* scene from theater glb */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* clickable plane */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* clickable plane */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function the add sound to the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* add movement to the player */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* add material to the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* on door hover */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create cone */,
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add movement to the player */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create cone */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* shark */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function for interacting with the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create fire */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function example */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* creating a animator */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* add material to the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create text */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* changing color sphere onClick */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function for interacting with the door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* add material to the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* add a shape to the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* transform the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* ground */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create player */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function for sound when door opens and closes */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create box */ ,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* fixed wall */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function for sound when door opens and closes */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create table */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* creating a animator */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create water */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* nft frame */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* scene from theater glb */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create cylinder */,
/* function the add sound to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create plane */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* changing color sphere onClick */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create water */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* door material */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* scene model from underwater.gltf */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create text */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function to play sound when the door opens */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* defining door positions */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create phone */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function to open and close the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create table */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add a door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function to play sound when the door opens */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function for interacting with the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create a cylinder */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create phone */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* creating door parent */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create text */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* add movement to the player */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a custom wheels component */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a sphere */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* door material */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function the add sound to the door */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create a custom wheels component */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* creating a animator */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create cone */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* ground */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create fire */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a sign */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* creating door parent */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a sphere */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create table */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a sphere */,
/* create cone */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create player */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a class */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add a door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create avocado */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a wheel */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* spawn a cube */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* creating a animator */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create table */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function for sound when door opens and closes */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* function to play sound when the door opens */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* clickable plane */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* add movement to the player */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create phone */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* creating door parent */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create cylinder */,
/* scene model from underwater.gltf */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* song list */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* spawn a cube */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* creating door parent */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* transform the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* defining door positions */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create phone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function the add sound to the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add movement to the player */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* ground */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create phone */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function example */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a wheel */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a class */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function for interacting with the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* shark */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function for interacting with the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create table */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function example */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* jukebox from gltf */ ,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* add material to the door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function to play sound when the door opens */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create cone */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* song list */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add a shape to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create player */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* defining door positions */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a class */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create water */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a custom wheels component */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a wheel */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* fixed wall */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a sphere */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a sign */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* clickable plane */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* creating door parent */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create player */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* on door hover */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create text */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* spawn a cube */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* on door hover */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* defining door positions */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create plane */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function to create a door entity */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create cone */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create water */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create water */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create cylinder */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* transform the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function for interacting with the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create a sign */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* function the add sound to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add a shape to the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* song list */ ,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create table */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* spawn a cube */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a custom wheels component */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* spawn a cube */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* on door hover */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create avocado */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* add material to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create phone */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* fixed wall */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* scene model from underwater.gltf */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create a cylinder */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* nft frame */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* creating door parent */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* function example */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function to open and close the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a class */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* song list */ ,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* door material */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a wheel */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create box */ ,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create water */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a cylinder */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* changing color sphere onClick */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create phone */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create water */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function the add sound to the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a cylinder */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create water */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function example */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* scene from theater glb */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create box */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create cone */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function the add sound to the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* creating a animator */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* spawn a cube */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* scene from theater glb */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create avocado */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* add material to the door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* nft frame */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create avocado */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* ground */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function to play sound when the door opens */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* nft frame */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* ground */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create cylinder */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a sign */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function for sound when door opens and closes */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* remove box */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* spawn a cube */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* transform the door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* scene model from underwater.gltf */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* add a shape to the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a class */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create phone */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a sphere */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* on door hover */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* door material */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* song list */ ,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* scene model from underwater.gltf */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function for sound when door opens and closes */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add smoke */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function the add sound to the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* scene model from underwater.gltf */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create fire */ ,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create cylinder */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create table */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create water */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* fixed wall */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a texture */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* clickable plane */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* clickable plane */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create text */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create phone */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* add smoke */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a sphere */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function to play sound when the door opens */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a sign */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create cone */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* ground */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* add a door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* add a shape to the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* song list */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* shark */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create a texture */ ,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create table */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to open and close the door */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* spawn a cube */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* on door hover */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* function the add sound to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a sign */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create cone */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* spawn a cube */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* door material */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a texture */ ,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* ground */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create box */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* nft frame */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* function example */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create cone */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add smoke */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function to play sound when the door opens */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* creating a animator */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* changing color sphere onClick */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add material to the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function example */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add a door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* add smoke */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* creating a animator */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* nft frame */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add a door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* defining door positions */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* changing color sphere onClick */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* add a shape to the door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* defining door positions */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* function to open and close the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function to play sound when the door opens */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* door material */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* shark */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* door material */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add a door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function to open and close the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create fire */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function for interacting with the door */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* spawn a cube */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create fire */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* jukebox from gltf */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* nft frame */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* remove box */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* remove box */,
/* create a wheel */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create avocado */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add smoke */ ,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create fire */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* add a shape to the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create cone */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* door material */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function to play sound when the door opens */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create cylinder */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* function to play sound when the door opens */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* creating a animator */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create plane */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* remove box */,
/* creating door parent */,
/* song list */ ,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* add material to the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* song list */ ,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* creating door parent */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* ground */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* song list */ ,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create avocado */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add material to the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create text */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function for sound when door opens and closes */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a custom wheels component */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* transform the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create cylinder */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a sphere */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create text */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* jukebox from gltf */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create avocado */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a custom wheels component */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add a shape to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* jukebox from gltf */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a texture */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function to play sound when the door opens */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create box */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* transform the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function the add sound to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* song list */ ,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add movement to the player */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create a class */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create fire */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* scene from theater glb */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add a door */,
/* add material to the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* creating door parent */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a sign */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* song list */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* remove box */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a cylinder */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* nft frame */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create fire */ ,
/* fixed wall */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function the add sound to the door */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create box */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* scene from theater glb */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create a wheel */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* creating door parent */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* fixed wall */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a texture */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create text */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function to create a door entity */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function to create a door entity */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create cone */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create a class */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a texture */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* fixed wall */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* scene model from underwater.gltf */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create fire */ ,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* defining door positions */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function to open and close the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* door material */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create fire */ ,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create water */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create fire */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create cylinder */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* door material */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene model from underwater.gltf */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a custom wheels component */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* add movement to the player */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* ground */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create plane */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function for interacting with the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create cylinder */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* transform the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* transform the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function for sound when door opens and closes */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* spawn a cube */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a class */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function the add sound to the door */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* scene from theater glb */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a texture */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a texture */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* creating a animator */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create cone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function for interacting with the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* changing color sphere onClick */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function to open and close the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* transform the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* add movement to the player */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* creating door parent */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* shark */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add a door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function the add sound to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create text */,
/* creating a animator */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* on door hover */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* remove box */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* function to create a door entity */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to create a door entity */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* changing color sphere onClick */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* clickable plane */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a cylinder */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* jukebox from gltf */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a wheel */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a custom wheels component */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* spawn a cube */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a cylinder */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create cone */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function the add sound to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* on door hover */,
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* clickable plane */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* scene from theater glb */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* changing color sphere onClick */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* shark */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* transform the door */,
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create text */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function to open and close the door */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create table */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a sign */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function to open and close the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function for interacting with the door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* fixed wall */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create box */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* transform the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* shark */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* on door hover */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* creating a animator */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* nft frame */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function example */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create text */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create fire */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create avocado */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add smoke */ ,
,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add material to the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function to open and close the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function for sound when door opens and closes */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function to create a door entity */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* on door hover */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a class */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a custom wheels component */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* shark */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create table */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* nft frame */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function example */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create plane */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create phone */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create cylinder */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create box */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* function to open and close the door */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function to create a door entity */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create fire */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a custom wheels component */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* scene from theater glb */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* nft frame */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add smoke */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a custom wheels component */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* scene model from underwater.gltf */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add a shape to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* spawn a cube */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function to open and close the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create avocado */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* clickable plane */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function for sound when door opens and closes */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* fixed wall */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* clickable plane */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create fire */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a sphere */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create plane */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* spawn a cube */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function the add sound to the door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a cylinder */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create cone */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create plane */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create phone */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create water */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create water */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* nft frame */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create fire */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create fire */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function to create a door entity */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* transform the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for sound when door opens and closes */,
/* create box */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function the add sound to the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create cylinder */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create fire */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* fixed wall */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* scene model from underwater.gltf */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* fixed wall */,
/* function for sound when door opens and closes */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* on door hover */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* shark */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* jukebox from gltf */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* ground */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function example */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* door material */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function to create a door entity */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create plane */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* on door hover */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* on door hover */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* clickable plane */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function for sound when door opens and closes */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a texture */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add a shape to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function to play sound when the door opens */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function to play sound when the door opens */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function to open and close the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* song list */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* ground */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create table */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create a sign */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* add a shape to the door */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* shark */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create avocado */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* clickable plane */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* song list */ ,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create phone */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* transform the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* jukebox from gltf */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create cylinder */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* remove box */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create table */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create box */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* scene model from underwater.gltf */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* add a door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create avocado */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function the add sound to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* remove box */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create player */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a cylinder */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create fire */ ,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create cone */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function for interacting with the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* shark */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* on door hover */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function the add sound to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create a wheel */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* defining door positions */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create cylinder */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function for interacting with the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create plane */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* scene from theater glb */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* clickable plane */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* creating door parent */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create box */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create cone */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create player */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* scene from theater glb */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function the add sound to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add a shape to the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* fixed wall */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create text */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create water */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* jukebox from gltf */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* add a shape to the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* add smoke */ ,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function the add sound to the door */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* scene from theater glb */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function to play sound when the door opens */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* on door hover */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a sphere */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function to create a door entity */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* nft frame */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* on door hover */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* nft frame */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* changing color sphere onClick */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* transform the door */,
/* function to create a door entity */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function to create a door entity */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create box */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* clickable plane */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a texture */ ,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* clickable plane */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* transform the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene model from underwater.gltf */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* nft frame */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create player */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* remove box */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create plane */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* scene model from underwater.gltf */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function to open and close the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create water */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function the add sound to the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create box */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function to play sound when the door opens */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* creating a animator */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a texture */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create cone */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a sign */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create player */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a custom wheels component */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* defining door positions */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a custom wheels component */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* spawn a cube */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create player */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a class */,
/* function to create a door entity */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create a sphere */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* song list */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* nft frame */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create table */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create plane */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* door material */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function example */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add movement to the player */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* creating a animator */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a class */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* song list */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a wheel */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create phone */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* remove box */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a custom wheels component */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* changing color sphere onClick */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function example */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create a class */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* nft frame */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create plane */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create table */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create cylinder */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create text */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* fixed wall */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* scene model from underwater.gltf */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a custom wheels component */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create cylinder */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create fire */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* changing color sphere onClick */,
/* create a cylinder */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* ground */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* defining door positions */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* changing color sphere onClick */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* spawn a cube */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a sign */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create phone */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create player */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* on door hover */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* door material */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add smoke */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* add smoke */ ,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function to open and close the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add movement to the player */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a custom wheels component */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* spawn a cube */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* fixed wall */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* nft frame */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* nft frame */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create phone */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create plane */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* song list */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create table */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function to play sound when the door opens */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create cone */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* transform the door */,
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* on door hover */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function to create a door entity */,
/* jukebox from gltf */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* fixed wall */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* jukebox from gltf */ ,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* scene model from underwater.gltf */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create box */ ,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create phone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* ground */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create avocado */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function for interacting with the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* scene from theater glb */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a class */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add a shape to the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* creating a animator */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* jukebox from gltf */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* jukebox from gltf */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* creating door parent */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a texture */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create avocado */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add material to the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* door material */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* remove box */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* add material to the door */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a custom wheels component */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* shark */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* ground */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* song list */ ,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create avocado */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a cylinder */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create fire */ ,
/* function to play sound when the door opens */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function example */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add a door */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* clickable plane */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* spawn a cube */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a sign */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create phone */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a class */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create water */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* defining door positions */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* nft frame */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* add smoke */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* clickable plane */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* scene model from underwater.gltf */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function the add sound to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a wheel */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* scene model from underwater.gltf */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function to create a door entity */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function to create a door entity */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* fixed wall */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create plane */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create plane */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function the add sound to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function the add sound to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* on door hover */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create player */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* shark */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* function for sound when door opens and closes */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* song list */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add movement to the player */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create box */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* transform the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* fixed wall */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function the add sound to the door */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* on door hover */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* transform the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a sphere */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create cylinder */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create avocado */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* function to create a door entity */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* shark */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create avocado */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function the add sound to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* ground */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* transform the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* clickable plane */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function example */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a custom wheels component */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* creating a animator */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function to create a door entity */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to open and close the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create box */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* creating door parent */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* ground */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a texture */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* creating a animator */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function the add sound to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* add movement to the player */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create a sphere */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* door material */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* transform the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* fixed wall */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create player */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* on door hover */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* jukebox from gltf */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function to play sound when the door opens */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a wheel */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function for sound when door opens and closes */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create plane */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create table */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* remove box */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create avocado */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* shark */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* add smoke */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create cone */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* transform the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create fire */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a sphere */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* nft frame */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create cone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* fixed wall */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create water */,
/* create cylinder */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create avocado */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* add movement to the player */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create box */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* defining door positions */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a wheel */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* scene from theater glb */,
/* function example */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function to play sound when the door opens */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create phone */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create cylinder */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* song list */ ,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* spawn a cube */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add a door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function example */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a sphere */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* scene from theater glb */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create plane */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a texture */ ,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create cylinder */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* scene from theater glb */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a class */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* transform the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create water */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* transform the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* scene model from underwater.gltf */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* shark */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a sign */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* shark */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create cone */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create text */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* shark */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a custom wheels component */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* song list */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* add a door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create avocado */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create cylinder */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create player */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create player */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* creating a animator */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function for interacting with the door */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a sphere */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create player */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a custom wheels component */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* spawn a cube */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function for sound when door opens and closes */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* add movement to the player */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function for sound when door opens and closes */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add a door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create cylinder */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a custom wheels component */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create player */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* fixed wall */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to create a door entity */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function to create a door entity */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* transform the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create box */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* jukebox from gltf */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* function to play sound when the door opens */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to play sound when the door opens */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add material to the door */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* add movement to the player */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* add a shape to the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create cone */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* creating door parent */,
/* create plane */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* remove box */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create phone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* ground */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create avocado */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* add material to the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a class */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create a class */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* transform the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a sign */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* door material */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* creating a animator */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create cone */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function to create a door entity */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create phone */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a wheel */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* transform the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* creating a animator */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* creating door parent */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create player */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a sign */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add smoke */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* scene from theater glb */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a texture */ ,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create water */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create fire */ ,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* add a shape to the door */,
/* add movement to the player */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* add movement to the player */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* song list */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create a custom wheels component */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* on door hover */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function to play sound when the door opens */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create avocado */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create fire */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* scene model from underwater.gltf */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function to create a door entity */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* defining door positions */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function to open and close the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* nft frame */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* creating a animator */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create box */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* transform the door */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a texture */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a cylinder */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function the add sound to the door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function for interacting with the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function for sound when door opens and closes */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create a custom wheels component */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* shark */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* defining door positions */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* door material */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* ground */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function for interacting with the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* remove box */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function for interacting with the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* door material */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* add a shape to the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* changing color sphere onClick */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a custom wheels component */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* song list */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* spawn a cube */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a sphere */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a cylinder */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function to play sound when the door opens */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* scene model from underwater.gltf */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* shark */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* song list */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* changing color sphere onClick */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function example */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* shark */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to play sound when the door opens */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* scene model from underwater.gltf */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for sound when door opens and closes */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* add material to the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a wheel */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function to create a door entity */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* creating door parent */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a class */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* song list */ ,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* clickable plane */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* jukebox from gltf */ ,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* scene model from underwater.gltf */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create text */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a custom wheels component */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* nft frame */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* door material */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create cone */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* scene from theater glb */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create fire */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* ground */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* song list */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add smoke */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* ground */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create cone */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create box */ ,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function for sound when door opens and closes */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create table */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a sign */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* scene from theater glb */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a sign */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* shark */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function to create a door entity */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* scene from theater glb */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* shark */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a door */,
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* nft frame */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* scene model from underwater.gltf */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a custom wheels component */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create fire */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* scene model from underwater.gltf */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* add material to the door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create player */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function example */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* nft frame */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* add a door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create phone */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function the add sound to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* on door hover */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function to open and close the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* add a door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add movement to the player */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function the add sound to the door */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* function for interacting with the door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create text */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function to open and close the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function for interacting with the door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function example */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create a custom wheels component */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create box */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* on door hover */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function the add sound to the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* function for interacting with the door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* add a shape to the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* remove box */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* function for interacting with the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* on door hover */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add smoke */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a cylinder */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* creating a animator */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create table */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function the add sound to the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* on door hover */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* creating door parent */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function example */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add a door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a cylinder */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function to create a door entity */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* fixed wall */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create player */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* creating door parent */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create cone */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a texture */ ,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a sphere */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* scene from theater glb */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create text */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* changing color sphere onClick */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create a cylinder */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function to open and close the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create phone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a sphere */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* ground */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* transform the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a cylinder */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a wheel */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* fixed wall */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a sphere */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a cylinder */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* spawn a cube */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* defining door positions */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function the add sound to the door */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a wheel */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add a door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* door material */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* fixed wall */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create text */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create text */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* function for sound when door opens and closes */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* fixed wall */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* defining door positions */,
/* function to play sound when the door opens */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function for interacting with the door */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a class */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create cone */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add a shape to the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* scene model from underwater.gltf */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* remove box */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* transform the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene from theater glb */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function to play sound when the door opens */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function to create a door entity */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function for interacting with the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* nft frame */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function for sound when door opens and closes */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function for sound when door opens and closes */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* clickable plane */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function for interacting with the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* on door hover */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* ground */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create fire */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* changing color sphere onClick */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a class */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a sign */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* jukebox from gltf */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* creating door parent */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* creating a animator */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create player */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create cone */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add movement to the player */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* scene from theater glb */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* add a door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create table */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* nft frame */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create fire */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* fixed wall */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* transform the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function for interacting with the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* transform the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* fixed wall */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* clickable plane */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* fixed wall */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* on door hover */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create water */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* changing color sphere onClick */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create box */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create box */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create box */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* scene model from underwater.gltf */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* song list */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* song list */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create a texture */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* door material */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* add a shape to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a sign */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function for interacting with the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a custom wheels component */,
/* scene from theater glb */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create text */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function to create a door entity */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* remove box */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create table */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* transform the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a sign */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create cone */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* fixed wall */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* clickable plane */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* changing color sphere onClick */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a sphere */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create a sphere */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add a door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* clickable plane */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create fire */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create water */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* add movement to the player */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a cylinder */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* defining door positions */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* ground */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add a door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* spawn a cube */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* creating door parent */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* add a door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create cylinder */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a cylinder */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* door material */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a wheel */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a texture */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function the add sound to the door */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a sign */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* on door hover */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create phone */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* spawn a cube */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* remove box */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create table */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a wheel */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* door material */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* fixed wall */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create cylinder */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* add a shape to the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* creating a animator */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* function for interacting with the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create water */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create table */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a texture */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* door material */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function for interacting with the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a sphere */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* fixed wall */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function to create a door entity */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add smoke */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* changing color sphere onClick */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create a cylinder */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* ground */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* remove box */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* add smoke */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function example */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* remove box */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function the add sound to the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* remove box */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* shark */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function to open and close the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a sphere */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create table */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add material to the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a custom wheels component */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a custom wheels component */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function to play sound when the door opens */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* on door hover */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function for interacting with the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function example */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* creating a animator */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* changing color sphere onClick */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* jukebox from gltf */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function the add sound to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a sign */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create avocado */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a class */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function the add sound to the door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a wheel */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* creating door parent */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function the add sound to the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create phone */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create a wheel */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a texture */ ,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* defining door positions */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* transform the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create box */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* scene model from underwater.gltf */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a cylinder */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function to create a door entity */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* door material */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* creating a animator */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* nft frame */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a texture */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a sign */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* nft frame */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create box */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create player */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* add material to the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create table */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create phone */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* creating door parent */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* shark */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add a shape to the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create fire */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create player */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* fixed wall */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create a sphere */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* add movement to the player */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* creating door parent */,
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create table */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function example */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create table */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* song list */ ,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* song list */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create text */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add smoke */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* defining door positions */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create player */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create phone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function for interacting with the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add material to the door */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a sphere */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* door material */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* song list */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function example */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* add a shape to the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* add a door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create cone */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create cylinder */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a texture */ ,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create cylinder */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add a shape to the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create cylinder */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* song list */ ,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create text */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function to create a door entity */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* nft frame */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function to create a door entity */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function example */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* creating a animator */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function for sound when door opens and closes */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* function the add sound to the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* clickable plane */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add movement to the player */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* creating a animator */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* add movement to the player */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* add a door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* transform the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function for interacting with the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function the add sound to the door */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create fire */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create box */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a sphere */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* clickable plane */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* shark */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create a custom wheels component */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* add material to the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create cylinder */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* scene from theater glb */,
/* add a door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create water */,
/* create a texture */ ,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* nft frame */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* fixed wall */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create text */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* creating a animator */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* changing color sphere onClick */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function for sound when door opens and closes */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create cone */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create table */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* jukebox from gltf */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a sign */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* changing color sphere onClick */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a sphere */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create box */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* ground */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a sign */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* changing color sphere onClick */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function to play sound when the door opens */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add movement to the player */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a sphere */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create cone */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* add a shape to the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create box */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create cone */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* add a door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function to play sound when the door opens */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* ground */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create water */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* jukebox from gltf */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create avocado */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* transform the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a custom wheels component */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* scene model from underwater.gltf */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* spawn a cube */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function to create a door entity */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for interacting with the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a texture */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a sphere */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function for interacting with the door */,
/* add a door */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create box */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function to play sound when the door opens */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* changing color sphere onClick */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* remove box */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* clickable plane */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function for interacting with the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* scene model from underwater.gltf */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create plane */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function for interacting with the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a class */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function for interacting with the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* door material */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create box */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create avocado */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a sphere */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* clickable plane */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* changing color sphere onClick */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create fire */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* creating door parent */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* fixed wall */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* shark */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create avocado */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* changing color sphere onClick */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* fixed wall */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* changing color sphere onClick */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create box */ ,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function to open and close the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* defining door positions */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function the add sound to the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create text */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add movement to the player */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* on door hover */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* song list */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* defining door positions */,
/* ground */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a cylinder */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create fire */ ,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function to play sound when the door opens */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create fire */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* jukebox from gltf */ ,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a sign */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create fire */ ,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create player */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create player */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add a shape to the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a sphere */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* fixed wall */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create fire */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* scene model from underwater.gltf */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a texture */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function to create a door entity */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* fixed wall */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a texture */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* scene from theater glb */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* spawn a cube */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a wheel */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function for sound when door opens and closes */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create cone */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* scene model from underwater.gltf */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create cone */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* creating a animator */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function example */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* scene model from underwater.gltf */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* nft frame */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* add smoke */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* defining door positions */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* creating door parent */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* door material */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a texture */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add movement to the player */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a class */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* shark */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create phone */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* changing color sphere onClick */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* clickable plane */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene model from underwater.gltf */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create water */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create water */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* spawn a cube */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a custom wheels component */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function the add sound to the door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function the add sound to the door */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* transform the door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* scene model from underwater.gltf */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* creating a animator */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* shark */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create cone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* shark */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* door material */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* shark */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* on door hover */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* fixed wall */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create phone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* scene from theater glb */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a custom wheels component */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* function for interacting with the door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a sign */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create fire */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* function for interacting with the door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create phone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create avocado */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create phone */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create phone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* song list */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function example */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* changing color sphere onClick */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function for interacting with the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a sphere */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* creating a animator */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* add smoke */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* spawn a cube */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create fire */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function to open and close the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create player */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* defining door positions */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* nft frame */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* clickable plane */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* on door hover */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* defining door positions */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add a door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add smoke */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create plane */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* on door hover */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* jukebox from gltf */ ,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* clickable plane */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to play sound when the door opens */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* song list */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* shark */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function to open and close the door */,
/* create a texture */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* add material to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* shark */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* creating a animator */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* creating a animator */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* clickable plane */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create fire */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* creating door parent */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a custom wheels component */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* song list */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create cylinder */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a texture */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create plane */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* jukebox from gltf */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create player */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* ground */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create cylinder */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create fire */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create water */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* add movement to the player */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create cone */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create a sign */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* defining door positions */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* song list */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a custom wheels component */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a class */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* jukebox from gltf */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create fire */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* clickable plane */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* changing color sphere onClick */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function the add sound to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* changing color sphere onClick */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* clickable plane */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* spawn a cube */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* defining door positions */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create cylinder */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a custom wheels component */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* on door hover */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create player */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* defining door positions */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* creating door parent */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create text */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create plane */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function the add sound to the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create text */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add a shape to the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* creating door parent */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* jukebox from gltf */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* changing color sphere onClick */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create text */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* function to create a door entity */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* add movement to the player */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create table */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function for interacting with the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* remove box */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function to create a door entity */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* ground */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* song list */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* nft frame */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* nft frame */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function to open and close the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* scene from theater glb */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* add a door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a sign */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function for sound when door opens and closes */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* nft frame */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* nft frame */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to play sound when the door opens */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a custom wheels component */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* clickable plane */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create cylinder */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create cone */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function to create a door entity */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create player */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create player */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* ground */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create box */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* add movement to the player */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* nft frame */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function for interacting with the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create plane */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* door material */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a wheel */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* transform the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* ground */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* scene from theater glb */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* door material */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* defining door positions */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function the add sound to the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create cone */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* remove box */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a wheel */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* on door hover */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* creating door parent */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add movement to the player */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a sphere */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* on door hover */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a texture */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function to play sound when the door opens */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* song list */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* function the add sound to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* add a door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create table */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* song list */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* scene from theater glb */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create player */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* door material */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create avocado */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add smoke */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* defining door positions */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* nft frame */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create avocado */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* ground */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create fire */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* transform the door */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create cone */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function example */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* creating a animator */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* transform the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* remove box */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* clickable plane */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a custom wheels component */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* spawn a cube */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create a cylinder */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create fire */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* changing color sphere onClick */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* changing color sphere onClick */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* fixed wall */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* creating a animator */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add material to the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create phone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* song list */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a sign */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create cone */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* ground */,
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create cylinder */,
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create plane */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* clickable plane */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* on door hover */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* shark */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a cylinder */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* remove box */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function to play sound when the door opens */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function for sound when door opens and closes */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function to play sound when the door opens */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add material to the door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add material to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a custom wheels component */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add a shape to the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create player */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a sphere */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add material to the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create text */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function the add sound to the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function example */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create text */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create table */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a custom wheels component */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function for sound when door opens and closes */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add material to the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create box */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* transform the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* nft frame */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a class */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* song list */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create text */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* creating a animator */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add material to the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create text */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* add a door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add material to the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create water */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* remove box */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create fire */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* fixed wall */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* jukebox from gltf */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create water */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to create a door entity */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* shark */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* changing color sphere onClick */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function to play sound when the door opens */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create avocado */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create water */,
/* function the add sound to the door */,
/* remove box */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function example */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create table */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function to open and close the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a sphere */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function for sound when door opens and closes */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a cylinder */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* transform the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* scene from theater glb */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* creating a animator */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* jukebox from gltf */ ,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a sphere */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* remove box */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* add a door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* scene from theater glb */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* creating door parent */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* spawn a cube */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* door material */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create water */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create table */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a shape to the door */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create a class */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* add a door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* spawn a cube */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create text */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* ground */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create cylinder */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* transform the door */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create cone */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add a door */,
/* create player */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* fixed wall */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene model from underwater.gltf */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* clickable plane */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a shape to the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* defining door positions */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create a texture */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* scene model from underwater.gltf */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* song list */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* spawn a cube */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* jukebox from gltf */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create water */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function the add sound to the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function for sound when door opens and closes */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create a wheel */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create box */ ,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function example */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a cylinder */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add smoke */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create avocado */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a texture */ ,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create cone */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create avocado */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* add material to the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* ground */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a sphere */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* remove box */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function for interacting with the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create table */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create box */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* creating a animator */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create fire */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add movement to the player */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create plane */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* fixed wall */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* jukebox from gltf */ ,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to create a door entity */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add movement to the player */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create fire */ ,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create cone */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create table */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create player */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* shark */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function example */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* clickable plane */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create a custom wheels component */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* ground */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function to play sound when the door opens */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add a shape to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create box */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* transform the door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create a wheel */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* song list */ ,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create box */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for sound when door opens and closes */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create cone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function for sound when door opens and closes */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* nft frame */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* door material */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create plane */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function to play sound when the door opens */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create player */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* function to play sound when the door opens */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create cylinder */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* ground */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* clickable plane */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* add a door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* song list */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a class */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* ground */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function to play sound when the door opens */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function for interacting with the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* door material */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* song list */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* creating a animator */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* fixed wall */,
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to create a door entity */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function to play sound when the door opens */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create cylinder */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* song list */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function to play sound when the door opens */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create text */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* clickable plane */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function for interacting with the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* changing color sphere onClick */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a class */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* on door hover */,
/* create a texture */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create cone */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* creating a animator */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* remove box */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function for sound when door opens and closes */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create water */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* defining door positions */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create phone */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* fixed wall */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create table */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* changing color sphere onClick */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function to create a door entity */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create text */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* creating door parent */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a class */,
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create a sphere */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function example */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* add smoke */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* scene model from underwater.gltf */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create text */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* spawn a cube */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* fixed wall */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create box */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create a cylinder */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* ground */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a sign */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create avocado */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create fire */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create text */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* song list */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a sign */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* ground */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function for interacting with the door */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* add movement to the player */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function to open and close the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a sign */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a sign */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* add movement to the player */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create water */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function to open and close the door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* song list */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create a sphere */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create avocado */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a sphere */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* creating door parent */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function the add sound to the door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* door material */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function example */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function example */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function to open and close the door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a class */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* creating door parent */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* transform the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a class */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create fire */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create avocado */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a sphere */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create water */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create table */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function for sound when door opens and closes */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create cylinder */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add a door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* creating door parent */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create plane */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* on door hover */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a cylinder */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* ground */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a wheel */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* shark */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* song list */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* on door hover */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a custom wheels component */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create fire */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* remove box */,
/* function to open and close the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* transform the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* on door hover */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* spawn a cube */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add movement to the player */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create cylinder */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function for sound when door opens and closes */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create avocado */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* shark */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create plane */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* function for interacting with the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* creating a animator */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* ground */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* ground */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function to create a door entity */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create table */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* function for interacting with the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* spawn a cube */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a wheel */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function the add sound to the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* spawn a cube */,
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create box */ ,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* clickable plane */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* jukebox from gltf */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* add smoke */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* defining door positions */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* nft frame */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* song list */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* on door hover */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* remove box */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create cone */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create text */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* add a shape to the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* door material */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a texture */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* spawn a cube */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* scene model from underwater.gltf */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* spawn a cube */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add a shape to the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* add smoke */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for sound when door opens and closes */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* jukebox from gltf */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* shark */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function example */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create water */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* door material */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create avocado */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* ground */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* scene model from underwater.gltf */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* ground */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add smoke */ ,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* nft frame */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function for interacting with the door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* nft frame */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* scene model from underwater.gltf */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a sign */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function for sound when door opens and closes */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function example */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a class */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* add a shape to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* changing color sphere onClick */,
/* clickable plane */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create plane */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* defining door positions */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create cylinder */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function for sound when door opens and closes */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to open and close the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* jukebox from gltf */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create avocado */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* function to open and close the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* fixed wall */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* changing color sphere onClick */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* scene model from underwater.gltf */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create water */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* on door hover */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a class */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a sphere */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* remove box */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* changing color sphere onClick */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* jukebox from gltf */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* defining door positions */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* ground */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* changing color sphere onClick */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add smoke */ ,
/* function the add sound to the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* song list */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a cylinder */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* add movement to the player */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a sign */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* changing color sphere onClick */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a cylinder */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function to open and close the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* defining door positions */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a sphere */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* clickable plane */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* changing color sphere onClick */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function to create a door entity */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* creating door parent */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add a door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* door material */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create a custom wheels component */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* jukebox from gltf */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* song list */ ,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* add movement to the player */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add material to the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create water */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a cylinder */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create table */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create phone */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for interacting with the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function for interacting with the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function for sound when door opens and closes */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function for interacting with the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* door material */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create box */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* song list */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* creating a animator */,
/* create a cylinder */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* changing color sphere onClick */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* scene from theater glb */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create text */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* function example */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* shark */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* function for sound when door opens and closes */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a texture */ ,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function example */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function to open and close the door */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* creating a animator */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create phone */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create avocado */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create phone */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create cone */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* function to create a door entity */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* add movement to the player */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create phone */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* add movement to the player */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create cylinder */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* add a shape to the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create fire */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* transform the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function example */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* spawn a cube */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* scene from theater glb */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function for interacting with the door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* nft frame */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create box */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* ground */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* door material */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a wheel */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* add a door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function to play sound when the door opens */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function for interacting with the door */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* transform the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* jukebox from gltf */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* door material */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create cone */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create cone */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create player */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create fire */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a custom wheels component */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* spawn a cube */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* fixed wall */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create cylinder */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* add smoke */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create player */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* scene model from underwater.gltf */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create plane */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function to open and close the door */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function example */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create plane */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create water */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function example */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* on door hover */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* transform the door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create cylinder */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a sign */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a class */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* transform the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add movement to the player */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* scene model from underwater.gltf */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* clickable plane */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function to play sound when the door opens */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function to open and close the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function to create a door entity */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function the add sound to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function for sound when door opens and closes */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* nft frame */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* spawn a cube */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add a shape to the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* add a shape to the door */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function for interacting with the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* add material to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function example */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a cylinder */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* function for sound when door opens and closes */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create player */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* function to play sound when the door opens */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create phone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function for sound when door opens and closes */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* nft frame */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* ground */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create avocado */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* jukebox from gltf */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* door material */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function the add sound to the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create text */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* add a shape to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a custom wheels component */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* creating door parent */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function for interacting with the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* ground */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a texture */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to create a door entity */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a wheel */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* song list */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create table */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* creating door parent */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create fire */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* defining door positions */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a sphere */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a cylinder */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* fixed wall */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a texture */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create cone */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* on door hover */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* creating door parent */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* transform the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create water */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* clickable plane */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create table */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* nft frame */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* shark */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create player */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* add movement to the player */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* creating door parent */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create avocado */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function to open and close the door */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add a shape to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* creating a animator */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create phone */,
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* ground */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* transform the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* nft frame */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene from theater glb */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create plane */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function to play sound when the door opens */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create a custom wheels component */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create water */,
/* create a sign */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* defining door positions */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* song list */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a custom wheels component */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create cone */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* fixed wall */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* song list */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create avocado */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add a door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* spawn a cube */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* scene model from underwater.gltf */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* scene model from underwater.gltf */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a wheel */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create water */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* creating door parent */,
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a sphere */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create table */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* add a shape to the door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* creating door parent */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a class */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* changing color sphere onClick */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a cylinder */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create phone */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* scene model from underwater.gltf */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* creating a animator */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create box */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function for interacting with the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create player */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* add smoke */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a class */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create cylinder */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* shark */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function to open and close the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* on door hover */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function example */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* jukebox from gltf */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create table */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create plane */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* scene model from underwater.gltf */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* on door hover */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* clickable plane */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function to open and close the door */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* on door hover */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add material to the door */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create fire */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a sign */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function the add sound to the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a texture */ ,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* clickable plane */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* scene model from underwater.gltf */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add smoke */ ,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* ground */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a wheel */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a class */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* scene from theater glb */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create table */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* creating door parent */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* fixed wall */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* transform the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* clickable plane */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function for sound when door opens and closes */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* ground */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create water */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* nft frame */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create table */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* changing color sphere onClick */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function to create a door entity */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* creating door parent */,
/* add a door */,
/* create a texture */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* changing color sphere onClick */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create player */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create text */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* song list */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* nft frame */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* scene model from underwater.gltf */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create table */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create water */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* creating a animator */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to open and close the door */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create box */ ,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* song list */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a custom wheels component */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* remove box */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* creating a animator */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create water */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create avocado */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* fixed wall */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create player */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* remove box */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* remove box */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create player */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create avocado */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* door material */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function example */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* creating a animator */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create table */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create avocado */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* remove box */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* add a door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* nft frame */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* transform the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* shark */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create cone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a cylinder */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a wheel */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a sign */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function to open and close the door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function to create a door entity */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create water */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function for interacting with the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function example */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create water */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* transform the door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function to create a door entity */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create cone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* transform the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a custom wheels component */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* creating door parent */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function for interacting with the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create box */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* add movement to the player */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add smoke */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* nft frame */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create water */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create plane */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* song list */ ,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create player */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* function for sound when door opens and closes */,
/* function example */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* add material to the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* add a door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* fixed wall */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* add a shape to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function for interacting with the door */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function to create a door entity */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* scene from theater glb */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a sign */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a wheel */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a texture */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a wheel */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* scene from theater glb */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a wheel */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create fire */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* changing color sphere onClick */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* spawn a cube */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add a shape to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function example */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* transform the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create plane */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a class */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create a sign */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* creating door parent */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create fire */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add smoke */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* nft frame */,
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a wheel */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create player */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function to play sound when the door opens */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create a custom wheels component */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create fire */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function to create a door entity */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* function example */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene model from underwater.gltf */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create player */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create cone */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* transform the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* scene from theater glb */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create avocado */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create phone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function for interacting with the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a sign */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to create a door entity */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a class */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a texture */ ,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create a class */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add movement to the player */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* changing color sphere onClick */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a sign */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* creating door parent */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* function to play sound when the door opens */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a custom wheels component */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create a texture */ ,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create fire */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a wheel */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* ground */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create text */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* shark */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* add movement to the player */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create player */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create box */ ,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add smoke */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a custom wheels component */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create table */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create phone */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function the add sound to the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* door material */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function to open and close the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create a texture */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create text */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* on door hover */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a sign */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* changing color sphere onClick */,
/* add a shape to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a wheel */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* clickable plane */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* scene model from underwater.gltf */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* add material to the door */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create a custom wheels component */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a wheel */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create plane */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* remove box */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function for sound when door opens and closes */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* creating a animator */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* nft frame */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a wheel */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function for interacting with the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* door material */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function for interacting with the door */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* on door hover */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a sign */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* changing color sphere onClick */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create phone */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function for sound when door opens and closes */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* creating a animator */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create water */,
/* remove box */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* function to play sound when the door opens */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create plane */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function to open and close the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add a door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function example */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create cylinder */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* creating a animator */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create avocado */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function for sound when door opens and closes */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function for sound when door opens and closes */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* scene from theater glb */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create box */ ,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to create a door entity */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create cylinder */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create water */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* function for sound when door opens and closes */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* clickable plane */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function to play sound when the door opens */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* ground */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* ground */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* scene from theater glb */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* nft frame */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a custom wheels component */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create avocado */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create text */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a sign */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* spawn a cube */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* clickable plane */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function example */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* ground */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* shark */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* shark */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create cylinder */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function to open and close the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create cone */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* add material to the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a cylinder */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create avocado */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function to play sound when the door opens */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create phone */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a sphere */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function to play sound when the door opens */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* add a shape to the door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a sphere */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create fire */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* add smoke */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* add material to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create a class */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function to open and close the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create phone */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add a shape to the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function for sound when door opens and closes */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* on door hover */,
/* add a door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add a shape to the door */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* jukebox from gltf */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* remove box */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add material to the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* spawn a cube */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* add smoke */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add material to the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create text */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function to open and close the door */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create text */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* defining door positions */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* add movement to the player */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create table */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* clickable plane */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* transform the door */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create cone */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a class */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* changing color sphere onClick */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* fixed wall */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create water */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create phone */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a cylinder */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a custom wheels component */,
,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* remove box */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* defining door positions */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create water */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a class */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* creating door parent */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* defining door positions */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* changing color sphere onClick */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a sign */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* scene from theater glb */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a sign */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* function example */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create fire */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* transform the door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* function example */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create phone */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a texture */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create fire */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* creating door parent */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a custom wheels component */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a custom wheels component */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function to play sound when the door opens */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function for interacting with the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* scene from theater glb */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* function example */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* transform the door */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a wheel */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* shark */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* creating door parent */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create cone */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a sphere */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create a custom wheels component */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* spawn a cube */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add a shape to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create a sphere */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create player */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* on door hover */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* ground */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function to create a door entity */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create table */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function to open and close the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* function to play sound when the door opens */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function to play sound when the door opens */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create cylinder */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a custom wheels component */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create text */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* changing color sphere onClick */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* create cone */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function to open and close the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function to play sound when the door opens */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* fixed wall */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* nft frame */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* on door hover */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* song list */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create cone */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* add smoke */ ,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function to open and close the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function to open and close the door */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* add material to the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add smoke */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* song list */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* creating a animator */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* shark */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* jukebox from gltf */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* creating a animator */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create table */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* function to open and close the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* add material to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create water */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* song list */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create a texture */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create a sphere */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* remove box */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function to play sound when the door opens */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create fire */ ,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* nft frame */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* nft frame */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* function the add sound to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create player */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create table */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function to open and close the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create a texture */ ,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add smoke */ ,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a class */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add smoke */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create cylinder */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* scene model from underwater.gltf */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a wheel */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create cone */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* on door hover */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create fire */ ,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* creating a animator */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function to open and close the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* add material to the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create a class */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* clickable plane */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* song list */ ,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create a texture */ ,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create box */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* defining door positions */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function for interacting with the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* defining door positions */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create a sphere */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add smoke */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function to play sound when the door opens */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a custom wheels component */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* defining door positions */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* changing color sphere onClick */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add a door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* scene model from underwater.gltf */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function for sound when door opens and closes */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* scene model from underwater.gltf */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create a texture */ ,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* remove box */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create box */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create fire */ ,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create cone */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create cone */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* add smoke */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* song list */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create phone */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create box */ ,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* defining door positions */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a cylinder */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create a cylinder */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create text */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* on door hover */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function to play sound when the door opens */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* add movement to the player */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function the add sound to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* add movement to the player */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* spawn a cube */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create box */ ,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function for sound when door opens and closes */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a sphere */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create water */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* spawn a cube */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* fixed wall */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function to play sound when the door opens */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create cone */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* clickable plane */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create a wheel */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create water */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* changing color sphere onClick */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function for sound when door opens and closes */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create avocado */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a wheel */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* clickable plane */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* remove box */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create cylinder */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a wheel */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create water */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* transform the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function the add sound to the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* add a shape to the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* add movement to the player */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a custom wheels component */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create a sign */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* clickable plane */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create plane */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create plane */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a custom wheels component */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* jukebox from gltf */ ,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* door material */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* nft frame */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* creating door parent */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* remove box */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* function to open and close the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function to create a door entity */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a cylinder */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* nft frame */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create text */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create avocado */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function example */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function for interacting with the door */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create a class */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* add smoke */ ,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function for interacting with the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create avocado */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a sign */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* defining door positions */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function to create a door entity */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* creating door parent */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* create a custom wheels component */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a class */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* creating a animator */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function the add sound to the door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* ground */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* add smoke */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* spawn a cube */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a texture */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function to create a door entity */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* on door hover */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create avocado */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* nft frame */,
/* create a class */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create table */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* ground */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a wheel */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function example */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create water */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add a shape to the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create text */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* defining door positions */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* create phone */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function the add sound to the door */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* function for interacting with the door */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* create a custom wheels component */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* jukebox from gltf */ ,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function to play sound when the door opens */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function to play sound when the door opens */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create phone */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* shark */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a custom wheels component */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* add movement to the player */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* creating a animator */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a texture */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add a door */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* clickable plane */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to open and close the door */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* shark */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* fixed wall */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a sphere */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* add a door */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create box */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* creating a animator */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a wheel */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* spawn a cube */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* function the add sound to the door */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function to create a door entity */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function for interacting with the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a custom wheels component */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* creating door parent */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* jukebox from gltf */ ,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* create cone */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* defining door positions */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* function for interacting with the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create a custom wheels component */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* function for interacting with the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to play sound when the door opens */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* ground */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create a class */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* on door hover */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create fire */ ,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to create a door entity */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a class */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function example */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* add material to the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* add a door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* create box */ ,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* changing color sphere onClick */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* creating a animator */,
/* fixed wall */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create water */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add material to the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* add a shape to the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create table */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* creating door parent */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* nft frame */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add movement to the player */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* nft frame */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* function for interacting with the door */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* transform the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create water */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create plane */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* add a door */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* remove box */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* remove box */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create fire */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* jukebox from gltf */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* transform the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create a class */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create cone */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* ground */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create player */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* changing color sphere onClick */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* shark */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create cylinder */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* remove box */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function to create a door entity */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* changing color sphere onClick */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a wheel */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* spawn a cube */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* jukebox from gltf */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* creating door parent */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* scene model from underwater.gltf */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* creating door parent */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create player */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* door material */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* add movement to the player */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* creating a animator */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* creating a animator */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* create a cylinder */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create table */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create box */ ,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* defining door positions */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* shark */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a custom wheels component */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create player */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* function to create a door entity */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create cone */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* function for sound when door opens and closes */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create a texture */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create water */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a wheel */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create cylinder */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a wheel */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create phone */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create a sign */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* defining door positions */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* spawn a cube */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* on door hover */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* creating door parent */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add a door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create a class */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* create a class */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* changing color sphere onClick */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* door material */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* add a door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* create a class */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create avocado */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a wheel */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* changing color sphere onClick */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create a cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* changing color sphere onClick */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add material to the door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a sphere */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* nft frame */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* nft frame */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* jukebox from gltf */ ,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function for sound when door opens and closes */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create a sphere */,
/* shark */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add smoke */ ,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* jukebox from gltf */ ,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create cylinder */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create text */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function to create a door entity */,
/* create a texture */ ,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create water */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* spawn a cube */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create water */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* door material */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* add a shape to the door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create avocado */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* scene from theater glb */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* add a door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function to play sound when the door opens */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* transform the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create box */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* add material to the door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* on door hover */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* nft frame */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* spawn a cube */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function for sound when door opens and closes */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* add a door */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* shark */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a sphere */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create plane */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function for interacting with the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* scene model from underwater.gltf */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function to play sound when the door opens */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create a sign */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function to play sound when the door opens */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create cylinder */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* spawn a cube */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* function the add sound to the door */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* spawn a cube */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* clickable plane */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* function for interacting with the door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create player */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create avocado */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create text */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* spawn a cube */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* door material */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function for interacting with the door */,
/* changing color sphere onClick */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* function the add sound to the door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* add smoke */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a cylinder */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* add material to the door */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* spawn a cube */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create box */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create cone */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* door material */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function to play sound when the door opens */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* remove box */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* creating a animator */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* function for interacting with the door */,
/* create text */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* clickable plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create cone */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create table */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* scene model from underwater.gltf */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* create cone */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* transform the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a transform component to the player
const playerTransform = new Transform({
  position: new Vector3(0, 0, 0),
  rotation: Quaternion.Euler(0, 0, 0),
  scale: new Vector3(1, 1, 1)
});
player.addComponentOrReplace(playerTransform);

// Add a GLTF shape component to the player
const playerGltf = new GLTFShape(""models/player.glb"");
player.addComponentOrReplace(playerGltf);"
/* spawn a cube */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* function to create a door entity */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* nft frame */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* song list */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* add a door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create a wheel */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create plane */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create text */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* function for sound when door opens and closes */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create plane */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* creating door parent */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create a cylinder */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* function the add sound to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* function to open and close the door */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create plane */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* nft frame */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function to create a door entity */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create cone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create table */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* function example */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* remove box */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function for sound when door opens and closes */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* add movement to the player */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* create water */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create a class */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* add movement to the player */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create a sign */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create a class */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* nft frame */,"const closedPos: Quaternion = Quaternion.Euler(0, 0, 0)

// Add actual door to scene. This entity doesn't rotate, its parent drags it with it.
const door = new Entity()
door.addComponent(
  new Transform({
    position: new Vector3(0.5, 0, 0),
    scale: new Vector3(1, 2, 0.05)
  })
)
door.addComponent(new BoxShape())
engine.addEntity(door)

// Define a material to color the door red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1

// Assign the material to the door
door.addComponent(doorMaterial)

// Define wrapper entity to rotate door. This is the entity that actually rotates.
const doorPivot = new Entity()
doorPivot.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3),
    rotation: closedPos
  })
)
//doorPivot.addComponent(new DoorState())
engine.addEntity(doorPivot)

// Set the door as a child of doorPivot
door.setParent(doorPivot)"
/* function the add sound to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* create a cylinder */,"const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}

// Update the OnClick event to trigger the toggleDoorWithSound function
door.addComponent(
  new OnClick(() => {
    toggleDoorWithSound()
  })
)"
/* create text */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* door material */,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create cone */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* add material to the door */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* ground */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create box */ ,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create fire */ ,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* scene model from underwater.gltf */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create a custom wheels component */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* function the add sound to the door */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function example */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create cone */,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* create fire */ ,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* on door hover */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create water */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* creating a animator */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* create a cylinder */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create cylinder */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create fire */ ,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* spawn a cube */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* fixed wall */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* scene model from underwater.gltf */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create a texture */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* add material to the door */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a custom wheels component */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* shark */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a texture */ ,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* on door hover */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function to open and close the door */,"// Environment
const stage = new Entity()
stage.addComponent(new GLTFShape('models/Theatre.glb'))
stage.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    rotation: Quaternion.Euler(0, 270, 0),
    scale: new Vector3(0.9, 1, 0.9),
  })
)
engine.addEntity(stage)"
/* creating a animator */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* scene from theater glb */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* shark */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* create water */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* ground */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* add a door */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add movement to the player */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* create fire */ ,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* nft frame */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add movement to the player */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* create a cylinder */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* create cylinder */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* create a sphere */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* creating door parent */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create text */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* jukebox from gltf */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* create phone */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* jukebox from gltf */ ,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a texture */ ,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create a sign */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* create water */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* add a door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* shark */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* add a door */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function for sound when door opens and closes */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create box */ ,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* creating a animator */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* transform the door */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* ground */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* remove box */,"// create the entity 
const plane = new Entity()

// transform the entity to give it a position
plane.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
plane.addComponentOrReplace(new PlaneShape())

// render entity in scene
engine.addEntity(plane)"
/* function for interacting with the door */,"// Define a material to color the door sides red
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.Red()
doorMaterial.metallic = 0.9
doorMaterial.roughness = 0.1"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create a class */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* changing color sphere onClick */,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* create a sphere */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* function to open and close the door */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* create cone */,"import * as THREE from 'three';

// Create a new mesh and material for the water surface
const waterMesh = new THREE.Mesh(
  new THREE.PlaneGeometry(1000, 1000),
  new THREE.MeshBasicMaterial({ color: 0x0077be, transparent: true, opacity: 0.6 })
);

// Rotate the mesh to make it flat
waterMesh.rotation.x = -Math.PI / 2;"
/* jukebox from gltf */ ,"// create the entity 
const c = new Entity()

// transform the entity to give it a position
c.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
c.addComponentOrReplace(new CylinderShape())

// render entity in scene
engine.addEntity(c)"
/* function for sound when door opens and closes */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* function to open and close the door */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* add a shape to the door */,"
const sign = new Entity()
sign.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sign.addComponent(new TextShape(""Welcome to Decentraland!""))

// Define a material to color the sign red
const signMaterial = new Material()
signMaterial.albedoColor = Color3.Red()

// Assign the material to the door
sign.addComponent(signMaterial)

engine.addEntity(sign)"
/* create a texture */ ,
/* function for interacting with the door */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* create text */,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* create a cylinder */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create a sphere */,"const box = new Entity()
box.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
box.addComponent(new BoxShape())

const animator = new Animator()
box.addComponent(animator)"
/* create player */,
/* creating a animator */,"// Custom component to handle wheel spinning
@Component('wheelSpin')
export class WheelSpin {
  active: boolean = false
  speed: number = 0
  direction: Vector3 = Vector3.Up()
}"
/* creating a animator */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* nft frame */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* remove box */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* add movement to the player */,"// create and entity
const table = new Entity()

// transform the position of the table
table.addComponentOrReplace(new Transform({
  position: new Vector3(5, 0, 5),
  scale: new Vector3(3, 1, 3)
}))
table.addComponentOrReplace(new BoxShape())

// add table to the scene
engine.addEntity(table)"
/* create cylinder */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* function for sound when door opens and closes */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* add material to the door */,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create water */,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function to create a door entity */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* create a custom wheels component */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* function example */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create phone */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)

// Modify the toggleDoor function to play a sound when the door opens or closes
function toggleDoorWithSound() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
    doorAudioSource.playOnce()
  } else {
    doorTransform.rotation.y = 0
    doorAudioSource.playOnce()
  }
}"
/* function example */,"//creates entity
const myEntity = new Entity()

// creates text shape
const myText = new TextShape(""Hello World!"")

// adds text shape to entity 
myEntity.addComponent(myText)"
/* add a shape to the door */,"// NFT picture frame
const entity = new Entity()
const shapeComponent = new NFTShape(
  'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795',
  { color: Color3.Blue(), style: PictureFrameStyle.Gold_Carved }
)
entity.addComponent(shapeComponent)
entity.addComponent(
  new Transform({
    position: new Vector3(4, 1.5, 4),
  })
)
engine.addEntity(entity)"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}"
/* jukebox from gltf */ ,"class MyBox extends Entity {
  constructor(position: Vector3) {
    super()
    this.addComponentOrReplace(
      new Transform({
        position,
        rotation: Quaternion.Euler(0, 0, 0),
        scale: new Vector3(1, 1, 1)
      })
    )

    this.addComponentOrReplace(new BoxShape())
  }
}

const myBox = new MyBox(new Vector3(5, 0, 5))

engine.addEntity(myBox)"
/* function the add sound to the door */,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
,"const sphere = new Entity()
sphere.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
sphere.addComponent(new SphereShape())
sphere.addComponent(new Material())

const originalColor = new Color3(1, 0, 0)
sphere.getComponent(Material).albedoColor = originalColor

sphere.addComponent(new OnClick(e => {
  const material = sphere.getComponent(Material)
  material.albedoColor = (material.albedoColor === (originalColor)) ? new Color3(0, 1, 0) : originalColor
}))

engine.addEntity(sphere)"
/* fixed wall */,"// ground
const floor = new Entity()
floor.addComponent(new GLTFShape('models/FloorBaseGrass.glb'))
floor.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(1.6, 0.1, 1.6),
  })
)
engine.addEntity(floor)"
/* function the add sound to the door */,"const plane = new Entity()
plane.addComponent(new Transform({
  position: new Vector3(5, 0, 5)
}))
plane.addComponent(new PlaneShape())
plane.addComponent(new OnClick(e => {
  log('Plane was clicked!')
}))

engine.addEntity(plane)"
/* shark */,"// create new entity
const phone = new Entity()

// add its position
phone.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5),
  scale: new Vector3(0.5, 0.1, 0.2)
}))
phone.addComponentOrReplace(new BoxShape())

// add the enitities details
const material = new Material()
material.metallic = 0.9
material.roughness = 0.1

// add the details to the entity
phone.addComponent(material)

// add entity to the scene
engine.addEntity(phone)"
/* nft frame */,"// Add a smoke source that creates a smoke puff every 0.2 seconds
fire.addComponent(new SmokeSource(0.2))
engine.addEntity(fire)"
/* remove box */,"// Create the player entity
const player = new Entity(""player"");
engine.addEntity(player);

// Add a movement component to the player
const playerMovement = new MoveTransformComponent(new Vector3(0, 0, 10), new Vector3(0, 0, 10),
5);
player.addComponentOrReplace(playerMovement);"
/* nft frame */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function for sound when door opens and closes */,"// create the entity 
const box = new Entity()

// transform the entity to give it a position
box.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
box.addComponentOrReplace(new BoxShape())

// render entity in scene
engine.addEntity(box)"
/* function to play sound when the door opens */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* creating a animator */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* function example */,"// Add Shark
const shark = new Entity()
shark.addComponent(new GLTFShape('models/shark.glb'))
shark.addComponent(
  new Transform({
    position: new Vector3(8, 3, 8),
  })
)
engine.addEntity(shark)"
/* changing color sphere onClick */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* create water */,"// Jukebox
const jukebox = new Entity()
jukebox.addComponent(new GLTFShape('models/Jukebox.gltf'))
jukebox.addComponent(
  new Transform({
    position: new Vector3(5, 0, 9.5),
    rotation: Quaternion.Euler(0, 180, 0),
    scale: new Vector3(0.6, 0.6, 0.6),
  })
)
engine.addEntity(jukebox)"
/* create cone */,"/* At the end of your scene’s index.ts file, add the following lines: */`
let avocado = engine.addEntity()

GltfContainer.create(avocado, {src: (""models/avocado.gltf""})

Transform.create(avocado, {
          position:  Vector3.create(3, 1, 3),
          scale: Vector3.create(10, 10, 10)
})"
/* add a door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//  Create a Transform component to position the door
const doorTransform = new Transform({
  position: new Vector3(8, 0, 8),
  scale: new Vector3(1, 2, 0.5)
})
door.addComponent(doorTransform)"
/* add smoke */ ,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* function example */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

//Add a shape component to the door Entity
const doorShape = new BoxShape()
door.addComponent(doorShape)"
/* create water */,"// add fireplace
const fire = new Entity()
fire.addComponent(new GLTFShape('models/Fireplace.glb'))
fire.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8)
  })
)"
/* add material to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}"
/* create box */ ,"
// Define song list
const songs: { src: string; name: string }[] = [
  { src: '', name: 'Telemann' },
  { src: '', name: 'Bach' },
  { src: '', name: 'Brahms' },
  { src: '', name: 'Chopin' },
]"
/* add movement to the player */,"// Create texture
const spiralTexture = new Texture('')

// Create material
const spiralMaterial = new Material()
spiralMaterial.albedoTexture = spiralTexture"
/* create water */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create a wheel */,
/* song list */ ,"// Create wheel entities
const wheel = new Entity()
wheel.addComponent(new CylinderShape())
wheel.addComponent(
  new Transform({
    position: new Vector3(6, 2, 11.1),
    rotation: Quaternion.Euler(90, 0, 0),
    scale: new Vector3(1, 0.05, 1),
  })
)
engine.addEntity(wheel)"
/* create player */,"/// --- Spawner function ---

function spawnCube(x: number, y: number, z: number) {
  // create the entity
  const cube = new Entity()

  // add a transform to the entity
  cube.addComponent(new Transform({ position: new Vector3(x, y, z) }))

  // add a shape to the entity
  cube.addComponent(new BoxShape())

  // add the entity to the engine
  engine.addEntity(cube)

  return cube
}

/// --- Spawn a cube ---

const cube = spawnCube(8, 1, 8)

cube.addComponent(
  new OnPointerDown(() => {
    cube.getComponent(Transform).scale.z *= 1.1
    cube.getComponent(Transform).scale.x *= 0.9

    spawnCube(Math.random() * 8 + 1, Math.random() * 8, Math.random() * 8 + 1)
  })
)"
/* jukebox from gltf */ ,"// fixed wall
const wall1 = new Entity()
wall1.addComponent(
  new Transform({
    position: new Vector3(4.5, 1, 4.1),
    scale: new Vector3(4, 3, 0.05),
  })
)
wall1.addComponent(new BoxShape())
engine.addEntity(wall1)"
/* create cylinder */,"// This parent entity holds the state for both door sides
const doorParent = new Entity()
doorParent.addComponent(
  new Transform({
    position: new Vector3(4, 1, 3)
  })
)"
/* create text */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* function the add sound to the door */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
/* create text */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a sound component to play a sound when the door opens or closes
const doorSound = new AudioClip('sounds/door-open-close.mp3')
const doorAudioSource = new AudioSource(doorSound)
door.addComponent(doorAudioSource)"
/* create cone */,"// Define open and closed positions for both door sides
const doorLClosed = new Vector3(0.5, 0, 0)
const doorLOpen = new Vector3(1.25, 0, 0)
const doorRClosed = new Vector3(-0.5, 0, 0)
const doorROpen = new Vector3(-1.25, 0, 0)"
/* create a sign */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* add a door */,
/* defining door positions */,"// create the entity 
const cone = new Entity()

// transform the entity to give it a position
cone.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))

// add shape to the entity 
cone.addComponentOrReplace(new ConeShape())

// render entity in scene
engine.addEntity(cone)"
/* add smoke */ ,"// Add 3D model for scenery
const seaBed = new Entity()
seaBed.addComponent(new GLTFShape('models/Underwater.gltf'))
seaBed.addComponent(
  new Transform({
    position: new Vector3(8, 0, 8),
    scale: new Vector3(0.8, 0.8, 0.8),
  })
)
engine.addEntity(seaBed)"
/* function to open and close the door */,"// creates sphere entity
const sphere = new Entity()
sphere.addComponentOrReplace(new Transform({
  position: new Vector3(5, 1, 5)
}))
sphere.addComponentOrReplace(new SphereShape())

engine.addEntity(sphere)"
/* add material to the door */,"function greet(name: string): void {
  log(""Hello, "" + name + ""!"")
}

greet(""John"") // Output: ""Hello, John!"""
/* creating door parent */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a function to open and close the door
function toggleDoor() {
  if (doorTransform.rotation.y === 0) {
    doorTransform.rotation.y = 1.57
  } else {
    doorTransform.rotation.y = 0
  }
}

// Create a clicking event to trigger the toggleDoor function
door.addComponent(
  new OnClick(() => {
    toggleDoor()
  })
)"
/* create avocado */,"// Create an entity
const box = new Entity()

// Give the entity a shape
box.addComponent(new BoxShape())

// Add the entity to the engine
engine.addEntity(box)
// Remove an entity from the engine
engine.removeEntity(box)"
/* create a custom wheels component */,"// create variable to hold cylinder
const cylinder = new Entity()

// we transform the component to set the position
// of the sphere in the scene
cylinder.addComponentOrReplace(new Transform({
  position: new Vector3(2, 1, 2)
}))
cylinder.addComponentOrReplace(new CylinderShape())


// add the sphere to the scene
engine.addEntity(cylinder)"
/* create plane */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Add a material component to the door Entity
const doorMaterial = new Material()
doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
door.addComponent(doorMaterial)"
/* create water */,"function createDoor() {
  const door = new Entity('door')
  engine.addEntity(door)
  return door
}

const door = createDoor();

// Create a hover event to change the door material when hovered over
door.addComponent(
  new OnPointerHoverEnter(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#A0522D"")
  })
)
door.addComponent(
  new OnPointerHoverExit(() => {
    doorMaterial.albedoColor = Color3.FromHexString(""#8B5E3C"")
  })
)"
